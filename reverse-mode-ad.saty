@require: class-slydifi/theme/arctic
@require: bibyfi/bibyfi
@require: bibyfi/bibyfi-IEEETran
@require: azmath/azmath
@require: matrix/matrix
@require: colorbox/colorbox
@require: ncsq/ncsq
@require: arrows/arrows
@require: arrows/commands
@require: fss/fss
@require: fss/fonts
@require: latexcmds/latexcmds
@require: fss/style

@import: references
@import: presets
@import: theorems
@import: mymath
@import: delcont

open LatexCmds
open SlydifiOverlay
open FigBox
open ArrowCommands
open MyMath
open DelCont

let-inline ctx \gbox ?:w x  = 
  let padding = match w with
        | None -> 2pt
        | Some(w) -> w
    in read-inline ctx {\fbox?:(0pt)?:(padding)?:(bg-color)?:(gray){#x;}}

in document '<
  +set-config(slydifi-cfg);
  +make-title(|
    title = {|Reverse-Mode 自動微分を理解する|};
    author = {|Hiromi ISHII|};
    date = {|2023-03-15|Tsukuba Computer Mathematics Seminar 2023|};
  |);

  +section{|Forward-Mode と Reverse-Mode 自動微分|}<
    +frame{自動微分とは？}<
      +listing{
        * \emph{自動微分}：与えられた関数の値とその微分係数を，合成関数の微分公式（\emph{連鎖律}）を使って効率的・厳密に計算する方法
          ** 関数の値を順に計算しながら，連鎖律を使って微分係数も計算する
          ** 深層学習で損失関数の最適化の際に用いる\emph{誤差逆伝播法}で注目を集める
        * 関連するが異なる計算方法：
          ** \emph{記号微分}：数式を記号的な構文木で表現し，微分法則に従い記号的に処理．
            *** 厳密だが項数が組合せ爆発して非効率になりがち．
          ** \emph{数値微分}：極限 ${\lim_{\Delta x \to 0} \frac{f(x + \Delta x) - f(x)}{\Delta x}}の${\Delta x}を微小数で置き換えて近似．
            *** あくまで近似．${\Delta t}をどう近似するかで振る舞いが変わってくる．
      }
    >

    +frame?:(2){連鎖律}<
      +listing{
        * 皆さんお馴染の基本公式
          \gather?:(AZMathEquation.notag)(${
          | \NCSq.cd-m!(open NCSq in [
              [object ${\R^n}
                ; arrow ?:${f} right
                ; object ${\R^k}
                ; arrow ?:${g} right
                ; object ${\R^m}
              ];
          ])
          | \dd{}{\bm{x}}(g \circ f) = \dd{g}{f} \dd{f}{\bm{x}}
          |});
        * 統一性のため${\bm{u}_0 = \bm{x}, \bm{u}_1 = f(\bm{u}_0), \bm{u}_2 = g(\bm{u}_1) = g(f(\bm{u}_0))}として並び換えれば，
          \gather?:(AZMathEquation.notag)(${
          | \NCSq.cd-m!(open NCSq in [[
              object ${\R^m};
              arrow ?*?:${\bm{u}_2} left;
              object ${\R^k};
              arrow ?*?:${\bm{u}_1} left;
              object ${\R^n};
              arrow ?*?:${\bm{u}_0} left;
              object ${\R^0};
            ]])
          | \dd{\bm{u}_2}{\bm{u}_0}
            = \dd{\bm{u}_2}{\bm{u}_1} \dd{\bm{u}_1}{\bm{u}_0}
          |});
      }
    >

    +frame?:(4){連鎖律（多変数）}<
      +p{
        多変数も同様（但し，各${\ipp{\bm{u}_i}{\bm{u}_j}}はヤコビ行列だと思うこと）
      }
      +NCSq.cd(open NCSq in [[
        object ${\R^{n_{N}}};
        arrow ?*?:${\bm{u}_{N}} left;
        object ${\R^{n_{N-1}}};
        arrow ?*?:${\bm{u}_{N-1}} left;
        object ${\cdots};
        arrow ?*?:${\bm{u}_1} left;
        object ${\R^{n_0}};
        arrow ?*?:${\bm{u}_0} left;
        object ${\R^0};
      ]]);
      +gather?:(AZMathEquation.notag)(${
          | \pp{\u_N}{\u_0}
            = \mphantom!(from 2){\pp{\u_N}{\u_N}}
              \pp{\u_{N}}{\u_{N-1}}
              \pp{\u_{N-1}}{\u_{N-2}}
              \cdots
              \pp{\u_2}{\u_1}
              \pp{\u_1}{\u_0}
              \mphantom!(from 2){\pp{\u_0}{\u_0}}
          | \mphantom!(from 3){\math-skip!(145pt) \draw?:!(0.25)?:!(15.5)!(
              Arrow.invert (Arrow.solid(|line-width = 0.25;head-size=0.5;|))
            ) \text!{Forward}} 
          | \mphantom!(from 4){\math-skip!(145pt) \draw?:!(0.25)?:!(15.5)!(
              Arrow.solid(|line-width = 0.25;head-size=0.5;|)
            ) \text!{Reverse}}
      |});
      +p?:(from 3){
        \phantom(from 3){これを\emph{前から}計算するのが\emph{Forward-Mode}自動微分}
      }
      +p?:(from 4){
        \phantom(from 4){これを\emph{後から}計算するのが\emph{Reverse-Mode}自動微分}
      }
    >

    +frame{Foward Mode 自動微分}<
      +listing{
        * \emph{Dual Number} ${\R[d]/(d^2)} を使って計算できる
          ** ${x + y d} の ${y} が一次微分係数を覚える役割を果す（${f(x) + f'(x) d} と思う）
        * 代数演算はそのまま延長，（区分的に）滑らかな関数についてもWeil環の標準的な${C^\infty}-環構造が入る
          ** 難しく聞こえるが，以下のような感じ：
            \gather?:(AZMathEquation.notag)(${
                |\sin(x + yd) = \sin(x) + y\cos(x) d,
                |\cos(x + yd) = \cos(x) - y\sin(x) d,
                |e^{(x + y d)} = e^x + y e^x d
                |});
      }
    >

    +frame{Forward Mode 計算例}<
      +listing{
        * 次で定まる関数${f: \R \to \R^3}の${x}に関する微分を求めてみよう：
          \eqn?:(AZMathEquation.notag)(${
            f(x) = (\sin(x^ 2 + 1), e^{x^2}, x^3 e^{-x})
          });
        * 入口は ${x + (\mathrm{d}x/\mathrm{d}x)d = x + d}を入れて${f(x + d)}を評価してみる：
          \alignat?:(AZMathEquation.notag)(1)(${
          || f(x + d)
          ||= (\sin((x + d)^ 2 + 1), e^{(x + d)^2}, (x + d)^3 e^{-(x+d)})
          ||= (\sin(x^ 2 + 2xd + 1), e^{x^2 + 2xd}, (x^3 + 3 x^2 d) (e^{-x} - e^{-x}d))
          ||= (\sin(x^ 2 + 1) + 2x\cos(x^ 2 + 1)d, e^{x^2} + 2xe^{x^2}d, (x^3 + 3 x^2 d) (e^{-x} - e^{-x}d))
          ||= (\sin(x^ 2 + 1), e^{x^2}, x^3 e^{x-x})
            + \underset{\text!{\fontsize(15pt){一階微分係数}}}{\muline{(2x\cos(x^ 2 + 1), 2xe^{x^2}, -x^3 e^{-x} + 3 x^2 e^{-x})}}d
          |});
      }
    >

    +frame{Forward-Mode だけでいいのでは？}<
      +listing{
        * 入力が一変数，出力が多変数の場合はForward-Mode で十分効率的
        * しかし，機械学習のように${f: \R^N \to \R}で${N \gg 0}の場合，Forward-Mode では効率がわるすぎる！
          \enumerate{
            * 素朴にやると，${\R[d]^N}を用意して，${i < N}ごとに${(0, \ldots, 0, x + d_i, 0, \ldots)}みたいなのを何回も渡すことになる
            * これを組にして ${(\R[d]^N)^N} について一挙に計算すると one-pass
            * いずれにせよ変数の数について自乗オーダーかかってしまい非効率！
          }
        * ${\idd{\bm{x}}{\bm{x}} = \idd{\bm{u}_0}{\bm{u}_0}}ではなく${\idd{\bm{u}_N}{\bm{u}_N}}の側から辿ったらどうか？
          ** これが \emph{Reverse-Mode} 自動微分！
      }
    >
  >

  +section{|Reverse-Mode 自動微分いろいろ|}<
    +frame{Reverse-Mode 自動微分}<
      +listing{
        * Reverse-Mode の概念図はこうだった
          \gather?:(AZMathEquation.notag)(${
          | \NCSq.cd-m!(open NCSq in [[
              object ${\R^{n_{N}}};
              arrow ?*?:${\bm{u}_{N}} left;
              object ${\R^{n_{N-1}}};
              arrow ?*?:${\bm{u}_{N-1}} left;
              object ${\cdots};
              arrow ?*?:${\bm{u}_1} left;
              object ${\R^{n_0}};
              arrow ?*?:${\bm{u}_0} left;
              object ${\R^0};
            ]])
          | \dd{\u_N}{\u_0}
          =   \pp{\u_N}{\u_N}
              \pp{\u_{N}}{\u_{N-1}}
              \pp{\u_{N-1}}{\u_{N-2}}
              \cdots
              \pp{\u_2}{\u_1}
              \pp{\u_1}{\u_0}
              \pp{\u_0}{\u_0}
          | \math-skip!(145pt) \draw?:!(0.25)?:!(15.5)!(
              Arrow.solid(|line-width = 0.25;head-size=0.5;|)
            ) \text!{Reverse}
          |});
        * 問題：計算の\emph{入出力と逆順}に辿る必要がある！
          ** 微分係数の計算には\emph{関数の値そのもの}が必要，\emph{往復}する必要がある
            *** 機械学習で\emph{誤差逆伝播法}(\emph{back propagation})と呼ばれるもの
          ** これを実現するためにいくつかやり方が知られている
      }
    >

    +frame{計算のグラフを覚えておく}<
      +listing{
        * Wengert Tapeなどと呼ばれる手法も同梱
        * 以下の説明は\cite[`岡谷:2022`];を参考にした．

      }
    >

    +frame{限定継続}<
      +listing{
        * \emph{継続}：プログラミング言語理論の概念である点からみた\emph{続きの計算}を表す
        * \emph{限定継続}：ある点から特定の点までの\emph{続きの計算}を表す
          ** ここでは\delcont(`shift`);/\delcont(`reset`);という一組のオペレータを使った定式化を使う
          ** 例：\verb(`1 + `); \reset(`k`)(fun k -> 
              {10 + \shift(k){#k; (#k; 100) + 1000} \* 2}
            );
          *** \delcont(`shift`);から見て\delcont(`reset`);にブチ当るまでの続きの計算が \delcont(`k`); に束縛される．
          *** 今回の場合は \delcont(`k = \n -> 10 + n * 2`);
          *** 上式は \delcont(`1 + (\k -> k (k 100)+1000) (\n -> 10 + n*2)`);と同値
          *** 評価を進めれば，\delcont(`1 + ((10+(10+100*2)*2)+1000) = 1431`);となる．
        * Wang et al.\cite[`Wang:2018`];では限定継続によるReverse-Mode自動微分を提案している
      }
    >

    +frame{限定継続によるReverse-Mode自動微分の実装}<
      +p{
        アイデア：順方向の計算結果から継続を逆に辿って微分係数を伝播させる

          \makebox?:(Top)(11.5cm){
            \code-printer?:(delcont)(
```D x dx + D y dy = 
  shift { fun k ->
    z <- D (x + y) 0.0
    k z
    dx += z.d
    dy += z.d
    return z
  }
```
            );
          }
        \makebox?:(Top)(11.5cm){
            \code-printer?:(delcont)(
```D x dx * D y dy = 
  shift { fun k ->
    z <- D (x * y) 0.0
    k z
    dx += y * z.d
    dy += x * z.d
    return z
  }
```
            );
          }
      }
    >

    +frame{限定継続による Reverse-Mode 自動微分の実装 II}<
      +p{
        微分係数を求めるところで \delcont(`reset`); を噛ませて出口の自明な微分係数を渡してやる。
      }
      +code-printer?:(delcont)(
```grad f x = {
  z <- D x 0.0
  reset { w <- f(z); w.d = 1.0 }
  return z.d
}
```
      );
      +listing{
        * Multi-Prompt 限定継続を使えば変数の操作を減らせる
          ** やってるひとが見当たらなかったので実験中（\cite[`石井:2023`];）      
      }
    >

    +frame{正当性の証明}<
      +listing{
        * 「うまくいきそう」以上をどう証明するか？
        * Krawiec et al.\cite[`Krawiec:2022`];ではプログラム変換として捉え，プログラミング言語意味論の手法を使ってその正当性を証明している．
          ** 実数値とその有限直和・直積を含む簡単な単純型付き${\lambda}-計算の体系を定義
          ** 自動微分をその体系に対するプログラム変換として定式化
          ** 様々な計算体系の正規化定理の証明などに用いられる\emph{logical relation}の論法を応用して，その正当性を示している
          ** 線型型などを使って空間・時間計算量の漸近最適性も示している
        * 最終的にはよりWengert Tapeに近い手法になるが，よりシステマティックな方法で導出され，正当性がきちんと証明されている．
      }
    >

  >
  +section{|まとめ|}<
    +namedframe(`まとめ`){\select(from 2){Any Questions?}{まとめ}}<
      +listing{
        * \emph{自動微分}：合成関数の微分公式（\emph{連鎖律}）を使って，関数の値とその微分係数を効率的に求める手法
          ** \emph{Forward-Mode}：入力の自明な微分係数を順方向に伝播させていって解く
          ** \emph{Reverse-Mode}：出力の自明な微分係数を逆方向に伝播させていって解く
        * ${(\text!{入力次元}) \ll (\text!{出力次元})} のときは Forward-Mode が効率的
        * ${(\text!{入力次元}) \gg (\text!{出力次元})} のときは Reverse-Mode が効率的
          ** 深層学習で\emph{誤差逆伝播法}と呼ばれているもの
          ** 何万次元の入力から決まるスカラー値の損失関数を最適化するのに使われる
        * Reverse-Mode は往復する必要があるので実装が複雑，複数の手法がある
          ** 本講演では目についたものについて説明した
      }
    >
    +frame-nofooter{参考文献}<
      +font-style[font-size 15pt]<
        +makebibliography 
          ?:(|sort-references=true; 
              citestyle=CiteAsNumber;
              name-shrink=true;
          |)
          (bibyfi-theme)(bibs);
      >
    >

    +againframe(`まとめ`);
  >
>